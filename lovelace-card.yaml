# Electricity Planner Comprehensive Dashboard
# Copy this YAML into your Lovelace dashboard
# Prerequisites: Install Mushroom Cards, Bar Card, and ApexCharts Card via HACS

type: vertical-stack
cards:
  # Main Decision Card
  - type: custom:mushroom-template-card
    primary: Electricity Planner
    secondary: >-
      {% if is_state('binary_sensor.electricity_planner_battery_grid_charging', 'on') and is_state('binary_sensor.electricity_planner_car_grid_charging', 'on') %}
        🔋⚡ Charge Both from Grid
      {% elif is_state('binary_sensor.electricity_planner_battery_grid_charging', 'on') %}
        🔋 Charge Battery from Grid
      {% elif is_state('binary_sensor.electricity_planner_car_grid_charging', 'on') %}
        ⚡ Charge Car from Grid
      {% else %}
        ⏳ Wait - No Grid Charging
      {% endif %}
    icon: >-
      {% if is_state('binary_sensor.electricity_planner_battery_grid_charging', 'on') or is_state('binary_sensor.electricity_planner_car_grid_charging', 'on') %}
        mdi:flash
      {% else %}
        mdi:flash-off
      {% endif %}
    icon_color: >-
      {% if is_state('binary_sensor.electricity_planner_battery_grid_charging', 'on') or is_state('binary_sensor.electricity_planner_car_grid_charging', 'on') %}
        green
      {% else %}
        red
      {% endif %}
    badge_icon: mdi:currency-eur
    badge_color: >-
      {% set price = states('sensor.electricity_planner_price_analysis') | float(0) %}
      {% if price < 0.10 %}
        green
      {% elif price < 0.20 %}
        orange
      {% else %}
        red
      {% endif %}

  # Price Analysis Card
  - type: horizontal-stack
    cards:
      - type: custom:mushroom-entity-card
        entity: sensor.electricity_planner_price_analysis
        name: Current Price
        icon: mdi:currency-eur
        secondary_info: >-
          {% set attrs = state_attr('sensor.electricity_planner_price_analysis', '') %}
          {% if attrs %}
            Position: {{ (attrs.price_position * 100) | round(0) }}% of daily range
          {% endif %}
        icon_color: >-
          {% set attrs = state_attr('sensor.electricity_planner_price_analysis', '') %}
          {% if attrs and attrs.very_low_price %}
            green
          {% elif attrs and attrs.is_low_price %}
            orange
          {% else %}
            red
          {% endif %}

      - type: custom:mushroom-template-card
        primary: "{{ states('sensor.electricity_planner_price_analysis') | round(3) }} €/kWh"
        secondary: >-
          {% set attrs = state_attr('sensor.electricity_planner_price_analysis', '') %}
          {% if attrs %}
            {% if attrs.price_trend_improving %}
              📈 Improving ({{ attrs.next_price | round(3) }} €/kWh next)
            {% else %}
              📉 Worsening ({{ attrs.next_price | round(3) }} €/kWh next)
            {% endif %}
          {% endif %}
        icon: mdi:trending-up
        icon_color: >-
          {% set attrs = state_attr('sensor.electricity_planner_price_analysis', '') %}
          {% if attrs and attrs.price_trend_improving %}
            green
          {% else %}
            red
          {% endif %}

  # Daily Price Range Visualization
  - type: custom:bar-card
    entities:
      - entity: sensor.electricity_planner_price_analysis
        name: "Daily Price Range"
    positions:
      icon: inside
      indicator: inside
      name: inside
    severity:
      - color: '#4CAF50'
        from: 0
        to: 0.3
      - color: '#FF9800'
        from: 0.3
        to: 0.7
      - color: '#F44336'
        from: 0.7
        to: 1
    min: 0
    max: 1
    height: 40px
    unit_of_measurement: ''
    entity_row: true
    title: >-
      {% set attrs = state_attr('sensor.electricity_planner_price_analysis', '') %}
      {% if attrs %}
        Current: {{ states('sensor.electricity_planner_price_analysis') | round(3) }}€ | 
        Low: {{ attrs.lowest_price | round(3) }}€ | 
        High: {{ attrs.highest_price | round(3) }}€
      {% endif %}
    value: >-
      {% set attrs = state_attr('sensor.electricity_planner_price_analysis', '') %}
      {% if attrs %}
        {{ (attrs.price_position * 100) | round(0) }}%
      {% else %}
        0
      {% endif %}

  # Decision Details
  - type: horizontal-stack
    cards:
      - type: custom:mushroom-entity-card
        entity: binary_sensor.electricity_planner_battery_grid_charging
        name: Battery Grid
        icon: mdi:battery-charging
        tap_action:
          action: more-info
        secondary_info: >-
          {{ state_attr('binary_sensor.electricity_planner_battery_grid_charging', 'reason') }}
        icon_color: >-
          {% if is_state('binary_sensor.electricity_planner_battery_grid_charging', 'on') %}
            green
          {% else %}
            red
          {% endif %}

      - type: custom:mushroom-entity-card
        entity: binary_sensor.electricity_planner_car_grid_charging
        name: Car Grid
        icon: mdi:car-electric
        tap_action:
          action: more-info
        secondary_info: >-
          {{ state_attr('binary_sensor.electricity_planner_car_grid_charging', 'reason') }}
        icon_color: >-
          {% if is_state('binary_sensor.electricity_planner_car_grid_charging', 'on') %}
            green
          {% else %}
            red
          {% endif %}

  # Battery & Power Status
  - type: horizontal-stack
    cards:
      - type: custom:mushroom-entity-card
        entity: sensor.electricity_planner_battery_analysis
        name: Battery SOC
        icon: mdi:battery
        unit: "%"
        secondary_info: >-
          {% set attrs = state_attr('sensor.electricity_planner_battery_analysis', '') %}
          {% if attrs %}
            {{ attrs.batteries_count }} batteries | 
            Min: {{ attrs.min_soc | round(0) }}% | 
            Max: {{ attrs.max_soc | round(0) }}%
          {% endif %}
        icon_color: >-
          {% set soc = states('sensor.electricity_planner_battery_analysis') | float(0) %}
          {% if soc >= 80 %}
            green
          {% elif soc >= 40 %}
            orange
          {% else %}
            red
          {% endif %}

      - type: custom:mushroom-entity-card
        entity: sensor.electricity_planner_power_analysis
        name: House Power
        icon: mdi:home-lightning-bolt
        unit: "W"
        secondary_info: >-
          {% set attrs = state_attr('sensor.electricity_planner_power_analysis', '') %}
          {% if attrs %}
            Solar: {{ attrs.solar_surplus }}W | 
            Car: {{ attrs.car_charging_power }}W
          {% endif %}
        icon_color: >-
          {% set attrs = state_attr('sensor.electricity_planner_power_analysis', '') %}
          {% if attrs and attrs.has_solar_surplus %}
            green
          {% else %}
            blue
          {% endif %}

  # Price Indicators
  - type: horizontal-stack
    cards:
      - type: custom:mushroom-template-card
        primary: >-
          {% set attrs = state_attr('sensor.electricity_planner_price_analysis', '') %}
          {% if attrs and attrs.very_low_price %}
            Very Low Price
          {% elif attrs and attrs.is_low_price %}
            Low Price
          {% else %}
            High Price
          {% endif %}
        secondary: >-
          {% set attrs = state_attr('sensor.electricity_planner_price_analysis', '') %}
          {% if attrs %}
            Threshold: {{ attrs.price_threshold | round(3) }}€/kWh
          {% endif %}
        icon: >-
          {% set attrs = state_attr('sensor.electricity_planner_price_analysis', '') %}
          {% if attrs and attrs.very_low_price %}
            mdi:currency-eur-off
          {% elif attrs and attrs.is_low_price %}
            mdi:currency-eur
          {% else %}
            mdi:alert-circle
          {% endif %}
        icon_color: >-
          {% set attrs = state_attr('sensor.electricity_planner_price_analysis', '') %}
          {% if attrs and attrs.very_low_price %}
            green
          {% elif attrs and attrs.is_low_price %}
            orange
          {% else %}
            red
          {% endif %}

      - type: custom:mushroom-entity-card
        entity: binary_sensor.electricity_planner_low_electricity_price
        name: Price OK
        icon: mdi:check-circle
        secondary_info: >-
          {% if is_state('binary_sensor.electricity_planner_low_electricity_price', 'on') %}
            Below threshold
          {% else %}
            Above threshold
          {% endif %}
        icon_color: >-
          {% if is_state('binary_sensor.electricity_planner_low_electricity_price', 'on') %}
            green
          {% else %}
            red
          {% endif %}

  # Separator
  - type: custom:mushroom-title-card
    title: 📊 Historical Data & Trends

  # Electricity Price Trends (24h)
  - type: custom:apexcharts-card
    header:
      show: true
      title: "⚡ Electricity Price Trends (24h)"
      show_states: true
      colorize_states: true
    graph_span: 24h
    span:
      end: day
    apex_config:
      chart:
        height: 280
      stroke:
        curve: smooth
        width: 2
      fill:
        type: gradient
        gradient:
          shadeIntensity: 0.1
      yaxis:
        - decimalsInFloat: 3
          min: 0
          title:
            text: "Price (€/kWh)"
      annotations:
        yaxis:
          - y: 0.15
            borderColor: '#FFA500'
            label:
              text: 'Price Threshold'
              style:
                color: '#FFA500'
    series:
      - entity: sensor.nordpool_kwh_be_eur_3_10_025
        name: "Current Price"
        color: '#2196F3'
        stroke_width: 3
      - entity: sensor.nordpool_kwh_be_eur_3_10_025
        attribute: raw_today
        data_generator: |
          const prices = entity.attributes.raw_today;
          return prices ? prices.map((price, index) => {
            const date = new Date();
            date.setHours(index, 0, 0, 0);
            return [date.getTime(), price.value];
          }) : [];
        name: "Today's Prices"
        color: '#4CAF50'
        stroke_width: 2
        curve: stepline
      - entity: sensor.nordpool_kwh_be_eur_3_10_025
        attribute: raw_tomorrow
        data_generator: |
          const prices = entity.attributes.raw_tomorrow;
          if (!prices) return [];
          return prices.map((price, index) => {
            const date = new Date();
            date.setDate(date.getDate() + 1);
            date.setHours(index, 0, 0, 0);
            return [date.getTime(), price.value];
          });
        name: "Tomorrow's Prices"
        color: '#FF9800'
        stroke_width: 2
        curve: stepline

  # Battery SOC and Charging Decisions
  - type: custom:apexcharts-card
    header:
      show: true
      title: "🔋 Battery SOC & Charging Decisions (24h)"
      show_states: true
      colorize_states: true
    graph_span: 24h
    apex_config:
      chart:
        height: 280
      stroke:
        curve: smooth
        width: 3
      yaxis:
        - id: soc
          min: 0
          max: 100
          title:
            text: "Battery SOC (%)"
          axisBorder:
            show: true
        - id: charging
          opposite: true
          min: 0
          max: 1.2
          title:
            text: "Charging Decision"
          labels:
            formatter: |
              EVAL:function(val) {
                return val === 1 ? 'ON' : val === 0 ? 'OFF' : '';
              }
    series:
      - entity: sensor.electricity_planner_battery_analysis
        name: "Battery SOC Average"
        yaxis_id: soc
        color: '#4CAF50'
        stroke_width: 3
      - entity: binary_sensor.electricity_planner_battery_grid_charging
        name: "Battery Grid Charging"
        yaxis_id: charging
        color: '#FF5722'
        stroke_width: 2
        transform: |
          return hass.states[entity.entity_id].state === 'on' ? 1 : 0;
      - entity: binary_sensor.electricity_planner_car_grid_charging
        name: "Car Grid Charging"
        yaxis_id: charging
        color: '#9C27B0'
        stroke_width: 2
        transform: |
          return hass.states[entity.entity_id].state === 'on' ? 1 : 0;

  # Power Flow Analysis
  - type: custom:apexcharts-card
    header:
      show: true
      title: "⚡ Power Flow Analysis (24h)"
      show_states: true
      colorize_states: true
    graph_span: 24h
    apex_config:
      chart:
        height: 280
        type: area
        stacked: false
      stroke:
        curve: smooth
        width: 2
      fill:
        type: gradient
        gradient:
          shadeIntensity: 0.1
      yaxis:
        - title:
            text: "Power (W)"
          min: |
            EVAL:(() => {
              const solar = parseFloat(hass.states['sensor.electricity_planner_power_analysis']?.attributes?.solar_surplus || 0);
              return Math.min(-1000, solar - 500);
            })()
    series:
      - entity: sensor.electricity_planner_power_analysis
        attribute: solar_surplus
        name: "Solar Surplus"
        color: '#FFC107'
        stroke_width: 3
      - entity: sensor.electricity_planner_power_analysis
        attribute: car_charging_power
        name: "Car Charging Power"
        color: '#9C27B0'
        stroke_width: 2
      - entity: sensor.electricity_planner_power_analysis
        name: "House Consumption"
        color: '#607D8B'
        stroke_width: 2

  # Price Position & Decision Logic
  - type: custom:apexcharts-card
    header:
      show: true
      title: "📊 Price Position & Decision Logic (24h)"
      show_states: true
      colorize_states: true
    graph_span: 24h
    apex_config:
      chart:
        height: 280
      stroke:
        curve: smooth
        width: 2
      yaxis:
        - id: position
          min: 0
          max: 1
          title:
            text: "Price Position (0-1)"
          labels:
            formatter: |
              EVAL:function(val) {
                return (val * 100).toFixed(0) + '%';
              }
        - id: binary
          opposite: true
          min: -0.1
          max: 1.1
          title:
            text: "Decisions"
          labels:
            formatter: |
              EVAL:function(val) {
                return val === 1 ? 'ON' : val === 0 ? 'OFF' : '';
              }
      annotations:
        yaxis:
          - y: 0.3
            borderColor: '#4CAF50'
            label:
              text: 'Very Low Price (30%)'
              style:
                color: '#4CAF50'
    series:
      - entity: sensor.electricity_planner_price_analysis
        attribute: price_position
        name: "Price Position"
        yaxis_id: position
        color: '#2196F3'
        stroke_width: 3
      - entity: binary_sensor.electricity_planner_low_electricity_price
        name: "Low Price Indicator"
        yaxis_id: binary
        color: '#4CAF50'
        stroke_width: 2
        transform: |
          return hass.states[entity.entity_id].state === 'on' ? 1 : 0;
      - entity: binary_sensor.electricity_planner_solar_production_active
        name: "Solar Production"
        yaxis_id: binary
        color: '#FFC107'
        stroke_width: 2
        transform: |
          return hass.states[entity.entity_id].state === 'on' ? 1 : 0;

  # Daily Summary Statistics
  - type: horizontal-stack
    cards:
      - type: custom:mushroom-template-card
        primary: "Today's Stats"
        secondary: >-
          {% set attrs = state_attr('sensor.electricity_planner_price_analysis', '') %}
          {% if attrs %}
            Min: {{ attrs.lowest_price | round(3) }}€ | 
            Max: {{ attrs.highest_price | round(3) }}€ | 
            Avg: {{ ((attrs.lowest_price + attrs.highest_price) / 2) | round(3) }}€
          {% endif %}
        icon: mdi:chart-line
        icon_color: blue

      - type: custom:mushroom-template-card
        primary: "Charging Time"
        secondary: >-
          {% set battery_on = is_state('binary_sensor.electricity_planner_battery_grid_charging', 'on') %}
          {% set car_on = is_state('binary_sensor.electricity_planner_car_grid_charging', 'on') %}
          {% if battery_on and car_on %}
            Both charging now
          {% elif battery_on %}
            Battery charging now
          {% elif car_on %}
            Car charging now
          {% else %}
            No grid charging
          {% endif %}
        icon: >-
          {% if is_state('binary_sensor.electricity_planner_battery_grid_charging', 'on') or is_state('binary_sensor.electricity_planner_car_grid_charging', 'on') %}
            mdi:lightning-bolt
          {% else %}
            mdi:pause
          {% endif %}
        icon_color: >-
          {% if is_state('binary_sensor.electricity_planner_battery_grid_charging', 'on') or is_state('binary_sensor.electricity_planner_car_grid_charging', 'on') %}
            green
          {% else %}
            orange
          {% endif %}