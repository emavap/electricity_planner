alias: Car Charger Dynamic Control
description: Control car charging only when car is plugged in; enforce planner allow/deny
triggers:
  - entity_id:
      - binary_sensor.electricity_planner_car_charge_from_grid
      - sensor.electricity_planner_car_charger_limit
    for: "00:02:00"
    trigger: state
  - entity_id: sensor.huawei_charger_plugged_in
    trigger: state
  - entity_id: switch.evcharger
    from: "off"
    to: "on"
    for: "00:00:10"
    trigger: state
  - minutes: /5
    trigger: time_pattern
conditions: []
actions:
  - variables:
      charger_is_off: "{{ is_state('switch.evcharger', 'off') }}"
      charge_from_grid: >-
        {{
        is_state('binary_sensor.electricity_planner_car_charge_from_grid','on')
        }}
      charger_recently_turned_on: |
        {{ (now() - states.switch.evcharger.last_changed).total_seconds() < 300
           if states.switch.evcharger.last_changed is defined else false }}
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ charger_is_off and charge_from_grid }}"
        sequence:
          - action: switch.turn_on
            target:
              entity_id: switch.evcharger
          - action: logbook.log
            data:
              name: Car Charger
              message: >
                Turned ON - Grid charging enabled by planner (waiting for
                initialization)
      - conditions:
          - condition: template
            value_template: "{{ not charger_is_off and charger_recently_turned_on }}"
        sequence:
          - variables:
              sensor_available: >
                {{ states('sensor.huawei_charger_plugged_in') not in
                ['unknown','unavailable'] }}
              time_since_on: >
                {{ ((now() -
                states.switch.evcharger.last_changed).total_seconds() / 60) |
                round(1) }}
          - action: logbook.log
            data:
              name: Car Charger
              message: >
                Charger initializing ({{ time_since_on }} min) - Sensors: {{
                'available' if sensor_available else 'not ready' }}
      - conditions:
          - condition: template
            value_template: "{{ not charger_is_off and not charger_recently_turned_on }}"
        sequence:
          - variables:
              sensor_available: >
                {{ states('sensor.huawei_charger_plugged_in') not in
                ['unknown','unavailable'] }}
              car_plugged_in: >
                {{ states('sensor.huawei_charger_plugged_in') | int(0) if
                sensor_available else 0 }}
              car_is_charging: "{{ car_plugged_in == 3 }}"
              car_is_connected: "{{ car_plugged_in in [2, 3] }}"
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ not sensor_available }}"
                sequence:
                  - action: logbook.log
                    data:
                      name: Car Charger
                      message: >
                        Warning: Charger sensors still unavailable after
                        initialization period
              - conditions:
                  - condition: template
                    value_template: >-
                      {{ sensor_available and not charge_from_grid and
                      car_is_connected }}
                sequence:
                  - action: switch.turn_off
                    target:
                      entity_id: switch.evcharger
                  - action: logbook.log
                    data:
                      name: Car Charger
                      message: >
                        Turned OFF - Charging not allowed by planner (car
                        connected)
              - conditions:
                  - condition: template
                    value_template: >-
                      {{ sensor_available and charge_from_grid and
                      car_is_connected }}
                sequence:
                  - variables:
                      min_power_kw: >
                        {{
                        state_attr('number.huawei_charger_dynamic_power_limit','min')
                        | float(1.4) }}
                      max_power_kw: >
                        {{
                        state_attr('number.huawei_charger_dynamic_power_limit','max')
                        | float(7.4) }}
                      min_power_w: "{{ (min_power_kw * 1000) | float }}"
                      max_power_w: "{{ (max_power_kw * 1000) | float }}"
                      current_limit_kw: >
                        {{ states('number.huawei_charger_dynamic_power_limit') |
                        float(min_power_kw) }}
                      current_limit_w: "{{ (current_limit_kw * 1000) | float }}"
                      planner_limit_w_raw: >
                        {{
                        states('sensor.electricity_planner_car_charger_limit') |
                        float(0) }}
                      planner_limit_valid: "{{ planner_limit_w_raw > 0 }}"
                      target_limit_w: |
                        {{ planner_limit_w_raw if planner_limit_valid else current_limit_w }}
                      target_limit_w_clamped: >
                        {{ [max_power_w, [min_power_w, target_limit_w] | max] |
                        min }}
                      target_limit_kw: "{{ (target_limit_w_clamped / 1000) | round(2) }}"
                      difference_w: "{{ (current_limit_w - target_limit_w_clamped) | abs }}"
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ planner_limit_valid and difference_w > 500 }}"
                        sequence:
                          - action: number.set_value
                            target:
                              entity_id: number.huawei_charger_dynamic_power_limit
                            data:
                              value: "{{ target_limit_kw }}"
                          - action: logbook.log
                            data:
                              name: Car Charger
                              message: >
                                Power adjusted from {{ current_limit_w |
                                round(0) }}W to {{ target_limit_w_clamped |
                                round(0) }}W (Status: {{ 'Charging' if
                                car_is_charging else 'Connected' }})
                      - conditions:
                          - condition: template
                            value_template: "{{ not planner_limit_valid }}"
                        sequence:
                          - action: logbook.log
                            data:
                              name: Car Charger
                              message: >
                                Planner limit unavailable/zero; leaving charger
                                at {{ current_limit_w | round(0) }}W (Status: {{
                                'Charging' if car_is_charging else 'Connected'
                                }})
              - conditions:
                  - condition: template
                    value_template: "{{ sensor_available and not car_is_connected }}"
                sequence:
                  - action: logbook.log
                    data:
                      name: Car Charger
                      message: >
                        Charger ready, no car connected (status: {{
                        car_plugged_in }})
mode: single
