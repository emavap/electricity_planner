# REQUIRED: Install "Gauge Card Pro" from HACS
# https://github.com/benjamin-dcs/gauge-card-pro
# This dashboard uses dynamic thresholds that update in real-time:
# - Buy price gauge: green → yellow (dynamic threshold) → red (max threshold)
# - Feed-in price gauge: red (negative) → yellow (zero) → green (feed-in threshold)

views:
  - title: Electricity Planner
    path: electricity-planner
    icon: mdi:lightning-bolt
    panel: true
    cards:
      - type: vertical-stack
        cards:
          - type: markdown
            content: |
              ## ⚡ Electricity Planner Dashboard
          - type: grid
            square: false
            columns: 2
            cards:
              - type: custom:gauge-card-pro
                entity: sensor.electricity_planner_current_electricity_price
                header: Buy price
                min: -0.9
                max: 0.9
                unit: "€/kWh"
                needle: true
                scale: "50px"
                segments: |-
                  {% set dynamic_threshold = state_attr('sensor.electricity_planner_current_electricity_price', 'dynamic_threshold') %}
                  {% set price_analysis = state_attr('sensor.electricity_planner_decision_diagnostics', 'price_analysis') %}
                  {% set average_threshold = price_analysis.average_threshold if price_analysis else None %}
                  {% set fixed_threshold = states('sensor.electricity_planner_diagnostics_monitoring_price_threshold') | float %}

                  {# Determine the max threshold (average or fixed) #}
                  {% if average_threshold != None %}
                    {% set max_threshold = average_threshold | float %}
                  {% else %}
                    {% set max_threshold = fixed_threshold %}
                  {% endif %}

                  {# Determine the active threshold (dynamic if present, otherwise max) #}
                  {% if dynamic_threshold != None %}
                    {% set threshold = dynamic_threshold | float %}
                  {% else %}
                    {% set threshold = max_threshold %}
                  {% endif %}
                  {{
                    [
                      { "from": -0.9, "color": "green" },
                      { "from": threshold, "color": "yellow" },
                      { "from": max_threshold, "color": "red" }
                    ]
                  }}

              - type: custom:gauge-card-pro
                entity: sensor.electricity_planner_diagnostics_monitoring_current_feed_in_price
                header: Feed-in price
                min: -0.9
                max: 0.9
                unit: "€/kWh"
                needle: true
                scale: "50px"
                segments: |-
                  {% set threshold = states('sensor.electricity_planner_diagnostics_monitoring_feed_in_price_threshold') | float %}
                  {{
                    [
                      { "from": -0.9, "color": "red" },
                      { "from": 0, "color": "yellow" },
                      { "from": threshold, "color": "green" }
                    ]
                  }}

          - type: grid
            square: false
            columns: 3
            cards:
              - type: button
                entity: binary_sensor.electricity_planner_battery_charge_from_grid
                name: Battery
                icon: mdi:battery-charging
                icon_height: 60px
                show_name: true
                show_state: true

              - type: button
                entity: binary_sensor.electricity_planner_car_charge_from_grid
                name: Car
                icon: mdi:car-electric
                icon_height: 60px
                show_name: true
                show_state: true
                tap_action:
                  action: more-info

              - type: button
                entity: binary_sensor.electricity_planner_data_nord_pool_available
                name: Data OK
                icon: mdi:database-check
                icon_height: 60px
                show_name: true
                show_state: true

          - type: gauge
            name: Battery SOC
            entity: sensor.electricity_planner_battery_soc_average
            min: 0
            max: 100
            unit: "%"
            needle: true
            severity:
              red: 0
              yellow: 30
              green: 70

          - type: entities
            title: Price components
            show_header_toggle: false
            entities:
              - entity: sensor.electricity_planner_current_electricity_price
                name: Total price
              - type: attribute
                entity: sensor.electricity_planner_current_electricity_price
                attribute: raw_current_price
                name: Energy market price
                unit: "€/kWh"
              - type: attribute
                entity: sensor.electricity_planner_current_electricity_price
                attribute: transport_cost
                name: Transport cost
                unit: "€/kWh"

          - type: entities
            title: Charging decisions
            show_header_toggle: false
            entities:
              - entity: binary_sensor.electricity_planner_battery_charge_from_grid
                name: Battery charging
                secondary_info: last-changed
              - type: attribute
                entity: binary_sensor.electricity_planner_battery_charge_from_grid
                attribute: reason
                name: Battery reason
              - entity: binary_sensor.electricity_planner_car_charge_from_grid
                name: Car charging
                secondary_info: last-changed
              - type: attribute
                entity: binary_sensor.electricity_planner_car_charge_from_grid
                attribute: reason
                name: Car reason

          - type: grid
            square: false
            columns: 2
            cards:
              - type: markdown
                title: Price adjustments
                content: |
                  **Highest price today:** {{ state_attr('sensor.electricity_planner_current_electricity_price', 'highest_price') | float | round(4) }} €/kWh

                  **Lowest price today:** {{ state_attr('sensor.electricity_planner_current_electricity_price', 'lowest_price') | float | round(4) }} €/kWh

                  **Raw Nord Pool price:** {{ state_attr('sensor.electricity_planner_current_electricity_price', 'raw_current_price') | float | round(4) }} €/kWh

                  **Transport cost:** {{ state_attr('sensor.electricity_planner_current_electricity_price', 'transport_cost') | float | round(4) }} €/kWh

                  **Consumption multiplier:** {{ state_attr('sensor.electricity_planner_current_electricity_price', 'price_adjustment_multiplier') | float | round(4) }}

                  **Consumption offset:** {{ state_attr('sensor.electricity_planner_current_electricity_price', 'price_adjustment_offset') | float | round(4) }} €/kWh

                  **Feed-in multiplier:** {{ state_attr('sensor.electricity_planner_diagnostics_monitoring_current_feed_in_price', 'feedin_multiplier') | float | round(4) }}

                  **Feed-in offset:** {{ state_attr('sensor.electricity_planner_diagnostics_monitoring_current_feed_in_price', 'feedin_offset') | float | round(4) }} €/kWh

                  **Feed-in threshold:** {{ states('sensor.electricity_planner_diagnostics_monitoring_feed_in_price_threshold') | float | round(4) }} €/kWh

              - type: markdown
                title: Thresholds
                content: |
                  **Max price threshold:** {{ states('sensor.electricity_planner_diagnostics_monitoring_price_threshold') | float | round(4) }} €/kWh

                  **Dynamic threshold:** {% set dyn_threshold = state_attr('sensor.electricity_planner_current_electricity_price', 'dynamic_threshold') %}{{ (dyn_threshold | float | round(4) ~ ' €/kWh') if dyn_threshold != None else 'Not active' }}

                  **Average threshold:** {% set price_analysis = state_attr('sensor.electricity_planner_decision_diagnostics', 'price_analysis') %}{{ (price_analysis['average_threshold'] | float | round(4) ~ ' €/kWh') if price_analysis and price_analysis.get('average_threshold') != None else 'Not available' }}

                  **Feed-in threshold:** {{ states('sensor.electricity_planner_diagnostics_monitoring_feed_in_price_threshold') | float | round(4) }} €/kWh

                  _Note: To toggle average threshold mode, go to Settings → Devices & Services → Electricity Planner → Configure_

          - type: entities
            title: Power controls
            show_header_toggle: false
            entities:
              - entity: sensor.electricity_planner_car_charger_limit
                name: Car charger limit

              - entity: sensor.electricity_planner_grid_setpoint
                name: Grid setpoint

          - type: grid
            square: false
            columns: 2
            cards:
              - type: gauge
                name: Solar surplus
                entity: sensor.electricity_planner_solar_surplus_power
                min: 0
                max: 5000
                unit: W
                needle: true
                severity:
                  red: 0
                  yellow: 2000
                  green: 4000

              - type: entities
                title: Power & status
                show_header_toggle: false
                entities:
                  - entity: sensor.electricity_planner_solar_surplus_power
                    name: Solar surplus

                  - entity: binary_sensor.electricity_planner_solar_producing_power
                    name: Solar producing

                  - entity: binary_sensor.electricity_planner_price_below_threshold
                    name: Price below threshold

                  - entity: sensor.electricity_planner_data_unavailable_duration
                    name: Data unavailable time

          - type: markdown
            title: Algorithm thresholds
            content: |
              **Very low price threshold:** {{ states('sensor.electricity_planner_diagnostics_monitoring_very_low_price_threshold') }}%

              **Emergency SOC:** {{ states('sensor.electricity_planner_diagnostics_monitoring_emergency_soc_threshold') }}%

              **Significant solar:** {{ states('sensor.electricity_planner_diagnostics_monitoring_significant_solar_threshold') }}W

              **Min car charging duration:** {% set config_limits = state_attr('sensor.electricity_planner_decision_diagnostics', 'configured_limits') %}{{ config_limits.get('min_car_charging_duration', 'unknown') if config_limits else 'unknown' }} hours

              _Note: To change car charging duration, go to Settings → Devices & Services → Electricity Planner → Configure_

          - type: history-graph
            title: Price vs decisions (48h)
            hours_to_show: 48
            refresh_interval: 300
            entities:
              - entity: sensor.electricity_planner_current_electricity_price
                name: Buy price
              - entity: sensor.electricity_planner_diagnostics_monitoring_current_feed_in_price
                name: Feed-in price
              - entity: binary_sensor.electricity_planner_battery_charge_from_grid
                name: Battery charging
              - entity: binary_sensor.electricity_planner_car_charge_from_grid
                name: Car charging

          - type: custom:apexcharts-card
            header:
              title: Nord Pool Electricity Prices (Now → Future)
              show: true
            graph_span: 36h
            span:
              start: minute
            now:
              show: true
              label: Now
            apex_config:
              chart:
                height: 350
                stacked: true
              tooltip:
                enabled: false
              xaxis:
                labels:
                  datetimeFormatter:
                    hour: "HH:mm"
              yaxis:
                decimalsInFloat: 4
                tickAmount: 20
                labels:
                  formatter: |
                    EVAL:function(value) {
                      return value.toFixed(4) + ' €/kWh';
                    }
            series:
              - entity: sensor.electricity_planner_diagnostics_monitoring_nord_pool_prices
                name: Transport cost
                type: column
                color: "#95a5a6"
                data_generator: |
                  return entity.attributes.data.map((interval) => {
                    const transport = interval.transport_cost ?? 0;
                    return [new Date(interval.start).getTime(), Math.max(transport, 0)];
                  });
                show:
                  legend_value: false
              - entity: sensor.electricity_planner_diagnostics_monitoring_nord_pool_prices
                name: Energy price
                type: column
                color: "#3498db"
                data_generator: |
                  return entity.attributes.data.map((interval) => {
                    const transport = interval.transport_cost ?? 0;
                    const energy = (interval.price ?? 0) - transport;
                    return [new Date(interval.start).getTime(), Math.max(energy, 0)];
                  });
                show:
                  legend_value: false
              - entity: sensor.electricity_planner_diagnostics_monitoring_nord_pool_prices
                name: Total price
                type: line
                stroke_width: 2
                color: "#2ecc71"
                curve: straight
                show:
                  legend_value: false
                data_generator: |
                  return entity.attributes.data.map((interval) => {
                    return [new Date(interval.start).getTime(), interval.price ?? 0];
                  });
              - entity: sensor.electricity_planner_diagnostics_monitoring_nord_pool_prices
                name: Max Threshold
                type: line
                stroke_width: 2
                color: "#e74c3c"
                curve: straight
                show:
                  legend_value: false
                data_generator: |
                  // Show the base max threshold (average or fixed)
                  const diagnosticsEntity = hass.states['sensor.electricity_planner_decision_diagnostics'];
                  const priceAnalysis = diagnosticsEntity?.attributes?.price_analysis;
                  const averageThreshold = priceAnalysis?.average_threshold;

                  const maxThresholdEntity = hass.states['sensor.electricity_planner_diagnostics_monitoring_price_threshold'];
                  const fixedThreshold = maxThresholdEntity ? parseFloat(maxThresholdEntity.state) : 0.15;

                  // Use average if enabled, otherwise fixed
                  let maxThreshold = fixedThreshold;
                  if (averageThreshold != null && averageThreshold !== undefined) {
                    maxThreshold = parseFloat(averageThreshold);
                  }

                  // Get time range from price data
                  if (!entity.attributes.data || entity.attributes.data.length === 0) {
                    return [];
                  }

                  const intervals = entity.attributes.data;
                  const startTime = new Date(intervals[0].start).getTime();
                  const endTime = new Date(intervals[intervals.length - 1].start).getTime();

                  return [
                    [startTime, maxThreshold],
                    [endTime, maxThreshold]
                  ];
              - entity: sensor.electricity_planner_diagnostics_monitoring_nord_pool_prices
                name: Dynamic Threshold
                type: line
                stroke_width: 3
                color: "#f39c12"
                curve: straight
                show:
                  legend_value: false
                data_generator: |
                  // Only show dynamic threshold when it's active (more strict than max)
                  const currentPriceEntity = hass.states['sensor.electricity_planner_current_electricity_price'];
                  const dynamicThreshold = currentPriceEntity?.attributes?.dynamic_threshold;

                  // If no dynamic threshold, don't show this line
                  if (dynamicThreshold == null || dynamicThreshold === undefined) {
                    return [];
                  }

                  const threshold = parseFloat(dynamicThreshold);

                  // Get time range from price data
                  if (!entity.attributes.data || entity.attributes.data.length === 0) {
                    return [];
                  }

                  const intervals = entity.attributes.data;
                  const startTime = new Date(intervals[0].start).getTime();
                  const endTime = new Date(intervals[intervals.length - 1].start).getTime();

                  return [
                    [startTime, threshold],
                    [endTime, threshold]
                  ];
